/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SupplyChain {
  export type CertificateStruct = {
    certifiedBy: string;
    inspectionDate: BigNumberish;
    certificateId: string;
    complianceStatus: string;
  };

  export type CertificateStructOutput = [
    certifiedBy: string,
    inspectionDate: bigint,
    certificateId: string,
    complianceStatus: string
  ] & {
    certifiedBy: string;
    inspectionDate: bigint;
    certificateId: string;
    complianceStatus: string;
  };

  export type CultivationDetailsStruct = {
    cropName: string;
    variety: string;
    area: BigNumberish;
    sowingDate: BigNumberish;
    harvestDate: BigNumberish;
    expectedYield: BigNumberish;
    actualYield: BigNumberish;
  };

  export type CultivationDetailsStructOutput = [
    cropName: string,
    variety: string,
    area: bigint,
    sowingDate: bigint,
    harvestDate: bigint,
    expectedYield: bigint,
    actualYield: bigint
  ] & {
    cropName: string;
    variety: string;
    area: bigint;
    sowingDate: bigint;
    harvestDate: bigint;
    expectedYield: bigint;
    actualYield: bigint;
  };

  export type FarmerInfoStruct = {
    farmerId: string;
    farmerName: string;
    village: string;
    district: string;
    state: string;
    coordinates: string;
    altitude: BigNumberish;
  };

  export type FarmerInfoStructOutput = [
    farmerId: string,
    farmerName: string,
    village: string,
    district: string,
    state: string,
    coordinates: string,
    altitude: bigint
  ] & {
    farmerId: string;
    farmerName: string;
    village: string;
    district: string;
    state: string;
    coordinates: string;
    altitude: bigint;
  };

  export type LabResultStruct = {
    curcuminContent: BigNumberish;
    moistureContent: BigNumberish;
    reportHash: string;
  };

  export type LabResultStructOutput = [
    curcuminContent: bigint,
    moistureContent: bigint,
    reportHash: string
  ] & { curcuminContent: bigint; moistureContent: bigint; reportHash: string };

  export type TraceDataStruct = {
    qrCodeHash: string;
    traceUrl: string;
    blockchainTxHash: string;
    destination: string;
  };

  export type TraceDataStructOutput = [
    qrCodeHash: string,
    traceUrl: string,
    blockchainTxHash: string,
    destination: string
  ] & {
    qrCodeHash: string;
    traceUrl: string;
    blockchainTxHash: string;
    destination: string;
  };

  export type BatchStruct = {
    batchId: string;
    giTag: string;
    registrationId: string;
    timestamp: BigNumberish;
  };

  export type BatchStructOutput = [
    batchId: string,
    giTag: string,
    registrationId: string,
    timestamp: bigint
  ] & {
    batchId: string;
    giTag: string;
    registrationId: string;
    timestamp: bigint;
  };

  export type ProcessingInfoStruct = {
    dryingProcess: string;
    processingUnitId: string;
    packagingDate: BigNumberish;
    batchWeight: BigNumberish;
    qualityGrade: string;
  };

  export type ProcessingInfoStructOutput = [
    dryingProcess: string,
    processingUnitId: string,
    packagingDate: bigint,
    batchWeight: bigint,
    qualityGrade: string
  ] & {
    dryingProcess: string;
    processingUnitId: string;
    packagingDate: bigint;
    batchWeight: bigint;
    qualityGrade: string;
  };

  export type TransferRecordStruct = {
    from: AddressLike;
    to: AddressLike;
    transferDate: BigNumberish;
    location: string;
  };

  export type TransferRecordStructOutput = [
    from: string,
    to: string,
    transferDate: bigint,
    location: string
  ] & { from: string; to: string; transferDate: bigint; location: string };
}

export interface SupplyChainInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCertificate"
      | "addCultivationDetails"
      | "addFarmerInfo"
      | "addLabResult"
      | "addTraceData"
      | "batches"
      | "certifications"
      | "createBatch"
      | "cultivationData"
      | "farmerData"
      | "getFullTrace"
      | "labResults"
      | "ownershipHistory"
      | "processingData"
      | "recordProcessing"
      | "traceRecords"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "BatchCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "addCertificate",
    values: [string, SupplyChain.CertificateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addCultivationDetails",
    values: [string, SupplyChain.CultivationDetailsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addFarmerInfo",
    values: [string, SupplyChain.FarmerInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addLabResult",
    values: [string, SupplyChain.LabResultStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addTraceData",
    values: [string, SupplyChain.TraceDataStruct]
  ): string;
  encodeFunctionData(functionFragment: "batches", values: [string]): string;
  encodeFunctionData(
    functionFragment: "certifications",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createBatch",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cultivationData",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "farmerData", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getFullTrace",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "labResults", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ownershipHistory",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processingData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "recordProcessing",
    values: [string, SupplyChain.ProcessingInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "traceRecords",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string, AddressLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCultivationDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFarmerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLabResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTraceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batches", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "certifications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cultivationData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "farmerData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFullTrace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "labResults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownershipHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processingData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordProcessing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "traceRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace BatchCreatedEvent {
  export type InputTuple = [batchId: string, timestamp: BigNumberish];
  export type OutputTuple = [batchId: string, timestamp: bigint];
  export interface OutputObject {
    batchId: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SupplyChain extends BaseContract {
  connect(runner?: ContractRunner | null): SupplyChain;
  waitForDeployment(): Promise<this>;

  interface: SupplyChainInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCertificate: TypedContractMethod<
    [_batchId: string, cert: SupplyChain.CertificateStruct],
    [void],
    "nonpayable"
  >;

  addCultivationDetails: TypedContractMethod<
    [_batchId: string, details: SupplyChain.CultivationDetailsStruct],
    [void],
    "nonpayable"
  >;

  addFarmerInfo: TypedContractMethod<
    [_batchId: string, info: SupplyChain.FarmerInfoStruct],
    [void],
    "nonpayable"
  >;

  addLabResult: TypedContractMethod<
    [_batchId: string, result: SupplyChain.LabResultStruct],
    [void],
    "nonpayable"
  >;

  addTraceData: TypedContractMethod<
    [_batchId: string, trace: SupplyChain.TraceDataStruct],
    [void],
    "nonpayable"
  >;

  batches: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint] & {
        batchId: string;
        giTag: string;
        registrationId: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  certifications: TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, string, string] & {
        certifiedBy: string;
        inspectionDate: bigint;
        certificateId: string;
        complianceStatus: string;
      }
    ],
    "view"
  >;

  createBatch: TypedContractMethod<
    [_batchId: string, _giTag: string, _registrationId: string],
    [void],
    "nonpayable"
  >;

  cultivationData: TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, bigint, bigint, bigint, bigint] & {
        cropName: string;
        variety: string;
        area: bigint;
        sowingDate: bigint;
        harvestDate: bigint;
        expectedYield: bigint;
        actualYield: bigint;
      }
    ],
    "view"
  >;

  farmerData: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, string, string, bigint] & {
        farmerId: string;
        farmerName: string;
        village: string;
        district: string;
        state: string;
        coordinates: string;
        altitude: bigint;
      }
    ],
    "view"
  >;

  getFullTrace: TypedContractMethod<
    [_batchId: string],
    [
      [
        SupplyChain.BatchStructOutput,
        SupplyChain.FarmerInfoStructOutput,
        SupplyChain.CultivationDetailsStructOutput,
        SupplyChain.ProcessingInfoStructOutput,
        SupplyChain.LabResultStructOutput,
        SupplyChain.CertificateStructOutput,
        SupplyChain.TransferRecordStructOutput[],
        SupplyChain.TraceDataStructOutput
      ]
    ],
    "view"
  >;

  labResults: TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, string] & {
        curcuminContent: bigint;
        moistureContent: bigint;
        reportHash: string;
      }
    ],
    "view"
  >;

  ownershipHistory: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [string, string, bigint, string] & {
        from: string;
        to: string;
        transferDate: bigint;
        location: string;
      }
    ],
    "view"
  >;

  processingData: TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, bigint, string] & {
        dryingProcess: string;
        processingUnitId: string;
        packagingDate: bigint;
        batchWeight: bigint;
        qualityGrade: string;
      }
    ],
    "view"
  >;

  recordProcessing: TypedContractMethod<
    [_batchId: string, info: SupplyChain.ProcessingInfoStruct],
    [void],
    "nonpayable"
  >;

  traceRecords: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string] & {
        qrCodeHash: string;
        traceUrl: string;
        blockchainTxHash: string;
        destination: string;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [_batchId: string, to: AddressLike, location: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCertificate"
  ): TypedContractMethod<
    [_batchId: string, cert: SupplyChain.CertificateStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addCultivationDetails"
  ): TypedContractMethod<
    [_batchId: string, details: SupplyChain.CultivationDetailsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addFarmerInfo"
  ): TypedContractMethod<
    [_batchId: string, info: SupplyChain.FarmerInfoStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLabResult"
  ): TypedContractMethod<
    [_batchId: string, result: SupplyChain.LabResultStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addTraceData"
  ): TypedContractMethod<
    [_batchId: string, trace: SupplyChain.TraceDataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batches"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint] & {
        batchId: string;
        giTag: string;
        registrationId: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "certifications"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, string, string] & {
        certifiedBy: string;
        inspectionDate: bigint;
        certificateId: string;
        complianceStatus: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createBatch"
  ): TypedContractMethod<
    [_batchId: string, _giTag: string, _registrationId: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cultivationData"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, bigint, bigint, bigint, bigint] & {
        cropName: string;
        variety: string;
        area: bigint;
        sowingDate: bigint;
        harvestDate: bigint;
        expectedYield: bigint;
        actualYield: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "farmerData"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, string, string, bigint] & {
        farmerId: string;
        farmerName: string;
        village: string;
        district: string;
        state: string;
        coordinates: string;
        altitude: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFullTrace"
  ): TypedContractMethod<
    [_batchId: string],
    [
      [
        SupplyChain.BatchStructOutput,
        SupplyChain.FarmerInfoStructOutput,
        SupplyChain.CultivationDetailsStructOutput,
        SupplyChain.ProcessingInfoStructOutput,
        SupplyChain.LabResultStructOutput,
        SupplyChain.CertificateStructOutput,
        SupplyChain.TransferRecordStructOutput[],
        SupplyChain.TraceDataStructOutput
      ]
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "labResults"
  ): TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, string] & {
        curcuminContent: bigint;
        moistureContent: bigint;
        reportHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "ownershipHistory"
  ): TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [string, string, bigint, string] & {
        from: string;
        to: string;
        transferDate: bigint;
        location: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "processingData"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, bigint, string] & {
        dryingProcess: string;
        processingUnitId: string;
        packagingDate: bigint;
        batchWeight: bigint;
        qualityGrade: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "recordProcessing"
  ): TypedContractMethod<
    [_batchId: string, info: SupplyChain.ProcessingInfoStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "traceRecords"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string] & {
        qrCodeHash: string;
        traceUrl: string;
        blockchainTxHash: string;
        destination: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<
    [_batchId: string, to: AddressLike, location: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BatchCreated"
  ): TypedContractEvent<
    BatchCreatedEvent.InputTuple,
    BatchCreatedEvent.OutputTuple,
    BatchCreatedEvent.OutputObject
  >;

  filters: {
    "BatchCreated(string,uint256)": TypedContractEvent<
      BatchCreatedEvent.InputTuple,
      BatchCreatedEvent.OutputTuple,
      BatchCreatedEvent.OutputObject
    >;
    BatchCreated: TypedContractEvent<
      BatchCreatedEvent.InputTuple,
      BatchCreatedEvent.OutputTuple,
      BatchCreatedEvent.OutputObject
    >;
  };
}
