/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace AgroTrust {
  export type BatchStruct = {
    cropName: string;
    variety: string;
    location: string;
    harvestDate: BigNumberish;
    exists: boolean;
  };

  export type BatchStructOutput = [
    cropName: string,
    variety: string,
    location: string,
    harvestDate: bigint,
    exists: boolean
  ] & {
    cropName: string;
    variety: string;
    location: string;
    harvestDate: bigint;
    exists: boolean;
  };

  export type CertificateStruct = {
    issuedBy: string;
    certificateType: string;
    issueDate: BigNumberish;
    certificateId: string;
    exists: boolean;
  };

  export type CertificateStructOutput = [
    issuedBy: string,
    certificateType: string,
    issueDate: bigint,
    certificateId: string,
    exists: boolean
  ] & {
    issuedBy: string;
    certificateType: string;
    issueDate: bigint;
    certificateId: string;
    exists: boolean;
  };

  export type CultivationDetailsStruct = {
    soilType: string;
    irrigationType: string;
    pesticideUsed: string;
    sowingDate: BigNumberish;
    area: BigNumberish;
    exists: boolean;
  };

  export type CultivationDetailsStructOutput = [
    soilType: string,
    irrigationType: string,
    pesticideUsed: string,
    sowingDate: bigint,
    area: bigint,
    exists: boolean
  ] & {
    soilType: string;
    irrigationType: string;
    pesticideUsed: string;
    sowingDate: bigint;
    area: bigint;
    exists: boolean;
  };

  export type FarmerInfoStruct = {
    farmerName: string;
    farmLocation: string;
    contact: string;
    farmerId: string;
    exists: boolean;
  };

  export type FarmerInfoStructOutput = [
    farmerName: string,
    farmLocation: string,
    contact: string,
    farmerId: string,
    exists: boolean
  ] & {
    farmerName: string;
    farmLocation: string;
    contact: string;
    farmerId: string;
    exists: boolean;
  };

  export type LabResultStruct = {
    labName: string;
    result: string;
    testDate: BigNumberish;
    reportHash: string;
    exists: boolean;
  };

  export type LabResultStructOutput = [
    labName: string,
    result: string,
    testDate: bigint,
    reportHash: string,
    exists: boolean
  ] & {
    labName: string;
    result: string;
    testDate: bigint;
    reportHash: string;
    exists: boolean;
  };

  export type ProcessingInfoStruct = {
    processorName: string;
    method: string;
    processingDate: BigNumberish;
    processingUnitId: string;
    exists: boolean;
  };

  export type ProcessingInfoStructOutput = [
    processorName: string,
    method: string,
    processingDate: bigint,
    processingUnitId: string,
    exists: boolean
  ] & {
    processorName: string;
    method: string;
    processingDate: bigint;
    processingUnitId: string;
    exists: boolean;
  };

  export type TraceDataStruct = {
    notes: string;
    qrCodeHash: string;
    exists: boolean;
  };

  export type TraceDataStructOutput = [
    notes: string,
    qrCodeHash: string,
    exists: boolean
  ] & { notes: string; qrCodeHash: string; exists: boolean };

  export type TransferRecordStruct = {
    from: string;
    to: string;
    purpose: string;
    transferDate: BigNumberish;
  };

  export type TransferRecordStructOutput = [
    from: string,
    to: string,
    purpose: string,
    transferDate: bigint
  ] & { from: string; to: string; purpose: string; transferDate: bigint };
}

export interface AgroTrustInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCertificate"
      | "addCultivationDetails"
      | "addFarmerInfo"
      | "addLabResult"
      | "addProcessingInfo"
      | "addTraceData"
      | "addTransferRecord"
      | "authorizeUser"
      | "authorizedUsers"
      | "batches"
      | "certificates"
      | "checkBatchExists"
      | "createBatch"
      | "cultivationData"
      | "farmerData"
      | "getBatch"
      | "getCertificate"
      | "getCultivationDetails"
      | "getFarmerInfo"
      | "getLabResult"
      | "getProcessingInfo"
      | "getTraceNotes"
      | "getTransferRecordCount"
      | "getTransferRecords"
      | "labResults"
      | "owner"
      | "processingData"
      | "revokeUser"
      | "traceRecords"
      | "transferLogs"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchCreated"
      | "CertificateAdded"
      | "CultivationDetailsAdded"
      | "FarmerInfoAdded"
      | "LabResultAdded"
      | "ProcessingInfoAdded"
      | "TraceDataAdded"
      | "TransferRecorded"
      | "UserAuthorized"
      | "UserRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addCertificate",
    values: [string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addCultivationDetails",
    values: [string, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addFarmerInfo",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addLabResult",
    values: [string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addProcessingInfo",
    values: [string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addTraceData",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addTransferRecord",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedUsers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "batches", values: [string]): string;
  encodeFunctionData(
    functionFragment: "certificates",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkBatchExists",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createBatch",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cultivationData",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "farmerData", values: [string]): string;
  encodeFunctionData(functionFragment: "getBatch", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getCertificate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCultivationDetails",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFarmerInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLabResult",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProcessingInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTraceNotes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferRecordCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferRecords",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "labResults", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processingData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "traceRecords",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLogs",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCultivationDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFarmerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLabResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addProcessingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTraceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTransferRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batches", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "certificates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkBatchExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cultivationData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "farmerData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCultivationDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFarmerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLabResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProcessingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraceNotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferRecordCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "labResults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processingData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "traceRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferLogs",
    data: BytesLike
  ): Result;
}

export namespace BatchCreatedEvent {
  export type InputTuple = [
    batchId: string,
    giTag: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [batchId: string, giTag: string, timestamp: bigint];
  export interface OutputObject {
    batchId: string;
    giTag: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CertificateAddedEvent {
  export type InputTuple = [batchId: string, certificateType: string];
  export type OutputTuple = [batchId: string, certificateType: string];
  export interface OutputObject {
    batchId: string;
    certificateType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CultivationDetailsAddedEvent {
  export type InputTuple = [batchId: string, cropName: string];
  export type OutputTuple = [batchId: string, cropName: string];
  export interface OutputObject {
    batchId: string;
    cropName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FarmerInfoAddedEvent {
  export type InputTuple = [batchId: string, farmerName: string];
  export type OutputTuple = [batchId: string, farmerName: string];
  export interface OutputObject {
    batchId: string;
    farmerName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LabResultAddedEvent {
  export type InputTuple = [batchId: string, labName: string];
  export type OutputTuple = [batchId: string, labName: string];
  export interface OutputObject {
    batchId: string;
    labName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProcessingInfoAddedEvent {
  export type InputTuple = [batchId: string, processorName: string];
  export type OutputTuple = [batchId: string, processorName: string];
  export interface OutputObject {
    batchId: string;
    processorName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TraceDataAddedEvent {
  export type InputTuple = [batchId: string];
  export type OutputTuple = [batchId: string];
  export interface OutputObject {
    batchId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferRecordedEvent {
  export type InputTuple = [batchId: string, from: string, to: string];
  export type OutputTuple = [batchId: string, from: string, to: string];
  export interface OutputObject {
    batchId: string;
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserAuthorizedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRevokedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AgroTrust extends BaseContract {
  connect(runner?: ContractRunner | null): AgroTrust;
  waitForDeployment(): Promise<this>;

  interface: AgroTrustInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCertificate: TypedContractMethod<
    [
      _batchId: string,
      _issuedBy: string,
      _certificateType: string,
      _issueDate: BigNumberish,
      _certificateId: string
    ],
    [void],
    "nonpayable"
  >;

  addCultivationDetails: TypedContractMethod<
    [
      _batchId: string,
      _soilType: string,
      _irrigationType: string,
      _pesticideUsed: string,
      _sowingDate: BigNumberish,
      _area: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  addFarmerInfo: TypedContractMethod<
    [
      _batchId: string,
      _farmerName: string,
      _farmLocation: string,
      _contact: string,
      _farmerId: string
    ],
    [void],
    "nonpayable"
  >;

  addLabResult: TypedContractMethod<
    [
      _batchId: string,
      _labName: string,
      _result: string,
      _testDate: BigNumberish,
      _reportHash: string
    ],
    [void],
    "nonpayable"
  >;

  addProcessingInfo: TypedContractMethod<
    [
      _batchId: string,
      _processorName: string,
      _method: string,
      _processingDate: BigNumberish,
      _processingUnitId: string
    ],
    [void],
    "nonpayable"
  >;

  addTraceData: TypedContractMethod<
    [_batchId: string, _notes: string, _qrCodeHash: string],
    [void],
    "nonpayable"
  >;

  addTransferRecord: TypedContractMethod<
    [_batchId: string, _from: string, _to: string, _purpose: string],
    [void],
    "nonpayable"
  >;

  authorizeUser: TypedContractMethod<
    [_user: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedUsers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  batches: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint, boolean] & {
        cropName: string;
        variety: string;
        location: string;
        harvestDate: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  certificates: TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, string, boolean] & {
        issuedBy: string;
        certificateType: string;
        issueDate: bigint;
        certificateId: string;
        exists: boolean;
      }
    ],
    "view"
  >;

  checkBatchExists: TypedContractMethod<[_batchId: string], [boolean], "view">;

  createBatch: TypedContractMethod<
    [
      _batchId: string,
      _cropName: string,
      _variety: string,
      _location: string,
      _harvestDate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  cultivationData: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint, bigint, boolean] & {
        soilType: string;
        irrigationType: string;
        pesticideUsed: string;
        sowingDate: bigint;
        area: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  farmerData: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, boolean] & {
        farmerName: string;
        farmLocation: string;
        contact: string;
        farmerId: string;
        exists: boolean;
      }
    ],
    "view"
  >;

  getBatch: TypedContractMethod<
    [_batchId: string],
    [AgroTrust.BatchStructOutput],
    "view"
  >;

  getCertificate: TypedContractMethod<
    [_batchId: string],
    [AgroTrust.CertificateStructOutput],
    "view"
  >;

  getCultivationDetails: TypedContractMethod<
    [_batchId: string],
    [AgroTrust.CultivationDetailsStructOutput],
    "view"
  >;

  getFarmerInfo: TypedContractMethod<
    [_batchId: string],
    [AgroTrust.FarmerInfoStructOutput],
    "view"
  >;

  getLabResult: TypedContractMethod<
    [_batchId: string],
    [AgroTrust.LabResultStructOutput],
    "view"
  >;

  getProcessingInfo: TypedContractMethod<
    [_batchId: string],
    [AgroTrust.ProcessingInfoStructOutput],
    "view"
  >;

  getTraceNotes: TypedContractMethod<
    [_batchId: string],
    [AgroTrust.TraceDataStructOutput],
    "view"
  >;

  getTransferRecordCount: TypedContractMethod<
    [_batchId: string],
    [bigint],
    "view"
  >;

  getTransferRecords: TypedContractMethod<
    [_batchId: string],
    [AgroTrust.TransferRecordStructOutput[]],
    "view"
  >;

  labResults: TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, string, boolean] & {
        labName: string;
        result: string;
        testDate: bigint;
        reportHash: string;
        exists: boolean;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  processingData: TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, string, boolean] & {
        processorName: string;
        method: string;
        processingDate: bigint;
        processingUnitId: string;
        exists: boolean;
      }
    ],
    "view"
  >;

  revokeUser: TypedContractMethod<[_user: AddressLike], [void], "nonpayable">;

  traceRecords: TypedContractMethod<
    [arg0: string],
    [
      [string, string, boolean] & {
        notes: string;
        qrCodeHash: string;
        exists: boolean;
      }
    ],
    "view"
  >;

  transferLogs: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [string, string, string, bigint] & {
        from: string;
        to: string;
        purpose: string;
        transferDate: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCertificate"
  ): TypedContractMethod<
    [
      _batchId: string,
      _issuedBy: string,
      _certificateType: string,
      _issueDate: BigNumberish,
      _certificateId: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addCultivationDetails"
  ): TypedContractMethod<
    [
      _batchId: string,
      _soilType: string,
      _irrigationType: string,
      _pesticideUsed: string,
      _sowingDate: BigNumberish,
      _area: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addFarmerInfo"
  ): TypedContractMethod<
    [
      _batchId: string,
      _farmerName: string,
      _farmLocation: string,
      _contact: string,
      _farmerId: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLabResult"
  ): TypedContractMethod<
    [
      _batchId: string,
      _labName: string,
      _result: string,
      _testDate: BigNumberish,
      _reportHash: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addProcessingInfo"
  ): TypedContractMethod<
    [
      _batchId: string,
      _processorName: string,
      _method: string,
      _processingDate: BigNumberish,
      _processingUnitId: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addTraceData"
  ): TypedContractMethod<
    [_batchId: string, _notes: string, _qrCodeHash: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addTransferRecord"
  ): TypedContractMethod<
    [_batchId: string, _from: string, _to: string, _purpose: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizeUser"
  ): TypedContractMethod<[_user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedUsers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "batches"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint, boolean] & {
        cropName: string;
        variety: string;
        location: string;
        harvestDate: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "certificates"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, string, boolean] & {
        issuedBy: string;
        certificateType: string;
        issueDate: bigint;
        certificateId: string;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkBatchExists"
  ): TypedContractMethod<[_batchId: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "createBatch"
  ): TypedContractMethod<
    [
      _batchId: string,
      _cropName: string,
      _variety: string,
      _location: string,
      _harvestDate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cultivationData"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint, bigint, boolean] & {
        soilType: string;
        irrigationType: string;
        pesticideUsed: string;
        sowingDate: bigint;
        area: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "farmerData"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, boolean] & {
        farmerName: string;
        farmLocation: string;
        contact: string;
        farmerId: string;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBatch"
  ): TypedContractMethod<
    [_batchId: string],
    [AgroTrust.BatchStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCertificate"
  ): TypedContractMethod<
    [_batchId: string],
    [AgroTrust.CertificateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCultivationDetails"
  ): TypedContractMethod<
    [_batchId: string],
    [AgroTrust.CultivationDetailsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFarmerInfo"
  ): TypedContractMethod<
    [_batchId: string],
    [AgroTrust.FarmerInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLabResult"
  ): TypedContractMethod<
    [_batchId: string],
    [AgroTrust.LabResultStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProcessingInfo"
  ): TypedContractMethod<
    [_batchId: string],
    [AgroTrust.ProcessingInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTraceNotes"
  ): TypedContractMethod<
    [_batchId: string],
    [AgroTrust.TraceDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTransferRecordCount"
  ): TypedContractMethod<[_batchId: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTransferRecords"
  ): TypedContractMethod<
    [_batchId: string],
    [AgroTrust.TransferRecordStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "labResults"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, string, boolean] & {
        labName: string;
        result: string;
        testDate: bigint;
        reportHash: string;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "processingData"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, string, boolean] & {
        processorName: string;
        method: string;
        processingDate: bigint;
        processingUnitId: string;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeUser"
  ): TypedContractMethod<[_user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "traceRecords"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, boolean] & {
        notes: string;
        qrCodeHash: string;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferLogs"
  ): TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [string, string, string, bigint] & {
        from: string;
        to: string;
        purpose: string;
        transferDate: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "BatchCreated"
  ): TypedContractEvent<
    BatchCreatedEvent.InputTuple,
    BatchCreatedEvent.OutputTuple,
    BatchCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CertificateAdded"
  ): TypedContractEvent<
    CertificateAddedEvent.InputTuple,
    CertificateAddedEvent.OutputTuple,
    CertificateAddedEvent.OutputObject
  >;
  getEvent(
    key: "CultivationDetailsAdded"
  ): TypedContractEvent<
    CultivationDetailsAddedEvent.InputTuple,
    CultivationDetailsAddedEvent.OutputTuple,
    CultivationDetailsAddedEvent.OutputObject
  >;
  getEvent(
    key: "FarmerInfoAdded"
  ): TypedContractEvent<
    FarmerInfoAddedEvent.InputTuple,
    FarmerInfoAddedEvent.OutputTuple,
    FarmerInfoAddedEvent.OutputObject
  >;
  getEvent(
    key: "LabResultAdded"
  ): TypedContractEvent<
    LabResultAddedEvent.InputTuple,
    LabResultAddedEvent.OutputTuple,
    LabResultAddedEvent.OutputObject
  >;
  getEvent(
    key: "ProcessingInfoAdded"
  ): TypedContractEvent<
    ProcessingInfoAddedEvent.InputTuple,
    ProcessingInfoAddedEvent.OutputTuple,
    ProcessingInfoAddedEvent.OutputObject
  >;
  getEvent(
    key: "TraceDataAdded"
  ): TypedContractEvent<
    TraceDataAddedEvent.InputTuple,
    TraceDataAddedEvent.OutputTuple,
    TraceDataAddedEvent.OutputObject
  >;
  getEvent(
    key: "TransferRecorded"
  ): TypedContractEvent<
    TransferRecordedEvent.InputTuple,
    TransferRecordedEvent.OutputTuple,
    TransferRecordedEvent.OutputObject
  >;
  getEvent(
    key: "UserAuthorized"
  ): TypedContractEvent<
    UserAuthorizedEvent.InputTuple,
    UserAuthorizedEvent.OutputTuple,
    UserAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "UserRevoked"
  ): TypedContractEvent<
    UserRevokedEvent.InputTuple,
    UserRevokedEvent.OutputTuple,
    UserRevokedEvent.OutputObject
  >;

  filters: {
    "BatchCreated(string,string,uint256)": TypedContractEvent<
      BatchCreatedEvent.InputTuple,
      BatchCreatedEvent.OutputTuple,
      BatchCreatedEvent.OutputObject
    >;
    BatchCreated: TypedContractEvent<
      BatchCreatedEvent.InputTuple,
      BatchCreatedEvent.OutputTuple,
      BatchCreatedEvent.OutputObject
    >;

    "CertificateAdded(string,string)": TypedContractEvent<
      CertificateAddedEvent.InputTuple,
      CertificateAddedEvent.OutputTuple,
      CertificateAddedEvent.OutputObject
    >;
    CertificateAdded: TypedContractEvent<
      CertificateAddedEvent.InputTuple,
      CertificateAddedEvent.OutputTuple,
      CertificateAddedEvent.OutputObject
    >;

    "CultivationDetailsAdded(string,string)": TypedContractEvent<
      CultivationDetailsAddedEvent.InputTuple,
      CultivationDetailsAddedEvent.OutputTuple,
      CultivationDetailsAddedEvent.OutputObject
    >;
    CultivationDetailsAdded: TypedContractEvent<
      CultivationDetailsAddedEvent.InputTuple,
      CultivationDetailsAddedEvent.OutputTuple,
      CultivationDetailsAddedEvent.OutputObject
    >;

    "FarmerInfoAdded(string,string)": TypedContractEvent<
      FarmerInfoAddedEvent.InputTuple,
      FarmerInfoAddedEvent.OutputTuple,
      FarmerInfoAddedEvent.OutputObject
    >;
    FarmerInfoAdded: TypedContractEvent<
      FarmerInfoAddedEvent.InputTuple,
      FarmerInfoAddedEvent.OutputTuple,
      FarmerInfoAddedEvent.OutputObject
    >;

    "LabResultAdded(string,string)": TypedContractEvent<
      LabResultAddedEvent.InputTuple,
      LabResultAddedEvent.OutputTuple,
      LabResultAddedEvent.OutputObject
    >;
    LabResultAdded: TypedContractEvent<
      LabResultAddedEvent.InputTuple,
      LabResultAddedEvent.OutputTuple,
      LabResultAddedEvent.OutputObject
    >;

    "ProcessingInfoAdded(string,string)": TypedContractEvent<
      ProcessingInfoAddedEvent.InputTuple,
      ProcessingInfoAddedEvent.OutputTuple,
      ProcessingInfoAddedEvent.OutputObject
    >;
    ProcessingInfoAdded: TypedContractEvent<
      ProcessingInfoAddedEvent.InputTuple,
      ProcessingInfoAddedEvent.OutputTuple,
      ProcessingInfoAddedEvent.OutputObject
    >;

    "TraceDataAdded(string)": TypedContractEvent<
      TraceDataAddedEvent.InputTuple,
      TraceDataAddedEvent.OutputTuple,
      TraceDataAddedEvent.OutputObject
    >;
    TraceDataAdded: TypedContractEvent<
      TraceDataAddedEvent.InputTuple,
      TraceDataAddedEvent.OutputTuple,
      TraceDataAddedEvent.OutputObject
    >;

    "TransferRecorded(string,string,string)": TypedContractEvent<
      TransferRecordedEvent.InputTuple,
      TransferRecordedEvent.OutputTuple,
      TransferRecordedEvent.OutputObject
    >;
    TransferRecorded: TypedContractEvent<
      TransferRecordedEvent.InputTuple,
      TransferRecordedEvent.OutputTuple,
      TransferRecordedEvent.OutputObject
    >;

    "UserAuthorized(address)": TypedContractEvent<
      UserAuthorizedEvent.InputTuple,
      UserAuthorizedEvent.OutputTuple,
      UserAuthorizedEvent.OutputObject
    >;
    UserAuthorized: TypedContractEvent<
      UserAuthorizedEvent.InputTuple,
      UserAuthorizedEvent.OutputTuple,
      UserAuthorizedEvent.OutputObject
    >;

    "UserRevoked(address)": TypedContractEvent<
      UserRevokedEvent.InputTuple,
      UserRevokedEvent.OutputTuple,
      UserRevokedEvent.OutputObject
    >;
    UserRevoked: TypedContractEvent<
      UserRevokedEvent.InputTuple,
      UserRevokedEvent.OutputTuple,
      UserRevokedEvent.OutputObject
    >;
  };
}
